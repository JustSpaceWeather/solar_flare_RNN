from config.Enum import *
import matplotlib.pyplot as plt
import numpy as np

"""
蓝色条代表平均个人TSS分数，红色折线代表特征的平均累积TSS分数。
"""

all_title_list = [
    'NN', 'LSTM', 'LSTM_Att', 'BLSTM', 'BLSTM_Att', 'GRU', 'GRU_Att', 'BGRU', 'BGRU_Att'
]

C_TSS_desc_NN = [0.564144737,0.551842105263157 ,0.555000000000000 ,0.571710526315789 ,0.565789473684210 ,0.572500000000000 ,0.547302631578947 ,0.554736842105263 ,0.544407894736842 ,0.543092105263157
]
C_TSS_desc_LSTM = [0.730328947,0.7187499999999990 ,0.7151973684210520 ,0.6902631578947360 ,0.6632236842105260 ,0.6675657894736840 ,0.6742763157894730 ,0.6672368421052630 ,0.6680921052631570 ,0.6653289473684210
]
C_TSS_desc_LSTM_Att = [0.697039474,0.705065789473684 ,0.678684210526315 ,0.674013157894736 ,0.659276315789473 ,0.659407894736842 ,0.655131578947368 ,0.659473684210526 ,0.665657894736842 ,0.659868421052631
]
C_TSS_desc_BLSTM = [0.730657895,0.7094078947368420 ,0.7136184210526310 ,0.6936184210526310 ,0.6729605263157890 ,0.6745394736842100 ,0.6782894736842100 ,0.6678289473684210 ,0.6730921052631580 ,0.6600657894736840
]
C_TSS_desc_BLSTM_Att = [0.712763158,0.706710526315789 ,0.684934210526315 ,0.677302631578947 ,0.664407894736842 ,0.657960526315789 ,0.657368421052631 ,0.659276315789473 ,0.663881578947368 ,0.668618421052631
]
C_TSS_desc_GRU = [0.714802632,0.7030263157894730 ,0.6936184210526310 ,0.6908552631578940 ,0.6613157894736840 ,0.6621052631578940 ,0.6604605263157890 ,0.6661184210526310 ,0.6586184210526310 ,0.6639473684210520
]
C_TSS_desc_GRU_Att = [0.709078947,0.695000000000000 ,0.689736842105263 ,0.672763157894736 ,0.653157894736842 ,0.655986842105263 ,0.657565789473684 ,0.664934210526315 ,0.662631578947368 ,0.663026315789473
]
C_TSS_desc_BGRU = [0.727368421,0.7161842105263150 ,0.7013815789473680 ,0.6931578947368420 ,0.6615131578947360 ,0.6615789473684210 ,0.6624342105263150 ,0.6593421052631580 ,0.6585526315789470 ,0.6625000000000000
]
C_TSS_desc_BGRU_Att = [0.707171053,0.701052631578947 ,0.683223684210526 ,0.680131578947368 ,0.657302631578947 ,0.654276315789473 ,0.666381578947368 ,0.661776315789473 ,0.656578947368421 ,0.665592105263157
]
C_std_desc_NN = [0.050188573,0.0379654858568080 ,0.0542754784624407 ,0.0550017312746907 ,0.0393220772820161 ,0.0400763208870883 ,0.0478922515983315 ,0.0518517891035690 ,0.0556512454034808 ,0.0386853853205073
]
C_std_desc_LSTM = [0.040345043,0.0354912717021524 ,0.0434085408608443 ,0.0314647056371265 ,0.0491130208375484 ,0.0590517241815077 ,0.0548081598273150 ,0.0530099883443293 ,0.0512087699839461 ,0.0495155285668251
]
C_std_desc_LSTM_Att = [0.028016198,0.0353149781262200 ,0.0335593388548810 ,0.0386965720492868 ,0.0453293293086040 ,0.0517692933109666 ,0.0453840567146450 ,0.0485686751413516 ,0.0475160346168151 ,0.0512305297114448
]
C_std_desc_BLSTM = [0.034843834,0.0395569844752557 ,0.0323026315789473 ,0.0383863961396125 ,0.0444217327367492 ,0.0565039665339701 ,0.0480902602425263 ,0.0460756051720078 ,0.0548902282172301 ,0.0559814302536206
]
C_std_desc_BLSTM_Att = [0.033718886,0.0365611941014981 ,0.0340678324690795 ,0.0370882869900451 ,0.0456774662284657 ,0.0434424289487131 ,0.0479539830205440 ,0.0446190884489656 ,0.0509445495223854 ,0.0470678052332343
]
C_std_desc_GRU = [0.046559476,0.0371243885014507 ,0.0429732188874797 ,0.0380823321705184 ,0.0469183663664142 ,0.0486381360924581 ,0.0486116546819189 ,0.0447419211513123 ,0.0499536228822111 ,0.0488296192638394
]
C_std_desc_GRU_Att = [0.043603881,0.0334973745198484 ,0.0374621230687736 ,0.0279217222996233 ,0.0460185964457475 ,0.0407772159001212 ,0.0437499999999999 ,0.0485052275361939 ,0.0504513904445054 ,0.0558093311234171
]
C_std_desc_BGRU = [0.036737634,0.0377567388639417 ,0.0400186612460041 ,0.0350654808913054 ,0.0483606334289675 ,0.0509935903853397 ,0.0502249527575824 ,0.0520467507720508 ,0.0508548801646911 ,0.0494498822923347
]
C_std_desc_BGRU_Att = [0.033029264,0.0317487212646282 ,0.0445859005482768 ,0.0386064829570862 ,0.0460154455130206 ,0.0509664645187417 ,0.0463677657669211 ,0.0503660853690423 ,0.0499385009598440 ,0.0498535337450597
]

all_name_list = [
    feature_C_desc['NN'],
    feature_C_desc['LSTM'],
    feature_C_desc['LSTM_Att2'],
    feature_C_desc['BLSTM'],
    feature_C_desc['BLSTM_Att2'],
    feature_C_desc['GRU'],
    feature_C_desc['GRU_Att2'],
    feature_C_desc['BGRU'],
    feature_C_desc['BGRU_Att2']
]

C_TSS_All_desc = [
    C_TSS_desc_NN,
    C_TSS_desc_LSTM,
    C_TSS_desc_LSTM_Att,
    C_TSS_desc_BLSTM,
    C_TSS_desc_BLSTM_Att,
    C_TSS_desc_GRU,
    C_TSS_desc_GRU_Att,
    C_TSS_desc_BGRU,
    C_TSS_desc_BGRU_Att,
]

C_std_All_desc = [
    C_std_desc_NN,
    C_std_desc_LSTM,
    C_std_desc_LSTM_Att,
    C_std_desc_BLSTM,
    C_std_desc_BLSTM_Att,
    C_std_desc_GRU,
    C_std_desc_GRU_Att,
    C_std_desc_BGRU,
    C_std_desc_BGRU_Att,
]

for i in range(len(C_std_All_desc)):
    plt.figure(dpi=400)
    # 设置x轴坐标名称
    names = [""]  # x轴坐标名称
    names = names + all_name_list[i]
    name_range = range(len(names))  # x轴坐标名称对于的range索引
    x = np.array([i for i in range(1, 11)])  # x轴坐标画图位置
    y = np.array(C_TSS_All_desc[i])  # 个人TSS分数
    x_err = np.array(C_std_All_desc[i])  # 个人TSS分数标准差

    # 开始画图
    plt.title(all_title_list[i]+'≥C')
    plt.ylim((0.4, 0.8))
    plt.xlim((0, 11))
    plt.xticks(name_range, names, rotation=90)  #
    # plt.bar(x, y, yerr=x_err, ecolor='black')
    plt.errorbar(x, y, yerr=x_err, ecolor='black', color='red', linestyle='--')
    plt.tight_layout()  # 调整画布大小，防止显示不全
    plt.savefig('D:/c_cut_desc/'+str(i)+'_c_cut_desc_' + all_title_list[i] + '.jpg')
    plt.show()

# 调整子图形之间的纵向距离
# figure.subplots_adjust(hspace=0.1)
